{"version":3,"file":"ngx-ellipsis.js","sources":["../../../projects/ngx-ellipsis/src/lib/directives/ellipsis.directive.ts","../../../projects/ngx-ellipsis/src/lib/ellipsis.module.ts","../../../projects/ngx-ellipsis/src/public_api.ts","../../../projects/ngx-ellipsis/src/ngx-ellipsis.ts"],"names":["ResizeObserverPonyfill"],"mappings":"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","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Renderer2,\n  Input,\n  Output,\n  EventEmitter,\n  NgZone,\n  OnChanges,\n  AfterViewInit,\n  OnDestroy,\n  Inject,\n  PLATFORM_ID,\n  SimpleChanges\n} from '@angular/core';\nimport { ResizeObserver as ResizeObserverPonyfill } from '@juggle/resize-observer';\nimport { take } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\n\n\nlet ResizeObserver = ResizeObserverPonyfill;\n\n/**\n * Directive to truncate the contained text, if it exceeds the element's boundaries\n * and append characters (configurable, default '...') if so.\n */\n@Directive({\n  selector: '[ellipsis]',\n  exportAs: 'ellipsis'\n})\nexport class EllipsisDirective implements OnChanges, OnDestroy, AfterViewInit {\n  /**\n   * The original text (not truncated yet)\n   */\n  private originalText: string;\n\n  /**\n   * The referenced element\n   */\n  private elem: any;\n\n  /**\n   * Inner div element (will be auto-created)\n   */\n  private innerElem: any;\n\n  /**\n   * Anchor tag wrapping the `ellipsisCharacters`\n   */\n  private moreAnchor: HTMLAnchorElement;\n\n  private previousDimensions: {\n    width: number,\n    height: number\n  };\n\n  /**\n   * Subject triggered when resize listeners should be removed\n   */\n  private removeResizeListeners$ = new Subject<void>();\n\n  /**\n   * Remove function for the currently registered click listener\n   * on the link `this.ellipsisCharacters` are wrapped in.\n   */\n  private destroyMoreClickListener: () => void;\n\n  /**\n   * The ellipsis html attribute\n   * If anything is passed, this will be used as a string to append to\n   * the truncated contents.\n   * Else '...' will be appended.\n   */\n  @Input('ellipsis') ellipsisCharacters: string;\n\n  /**\n   * The ellipsis-content html attribute\n   * If passed this is used as content, else contents\n   * are fetched from textContent\n   */\n  @Input('ellipsis-content') ellipsisContent: string | number = null;\n\n  /**\n   * The ellipsis-word-boundaries html attribute\n   * If anything is passed, each character will be interpreted\n   * as a word boundary at which the text may be truncated.\n   * Else the text may be truncated at any character.\n   */\n  @Input('ellipsis-word-boundaries') ellipsisWordBoundaries: string;\n\n  /**\n   * Function to use for string splitting. Defaults to the native `String#substr`.\n   * (This may for example be used to avoid splitting surrogate pairs- used by some emojis -\n   * by providing a lib such as runes.)\n   */\n  @Input('ellipsis-substr-fn') ellipsisSubstrFn:  (str: string, from: number, length?: number) => string;\n\n  /**\n   * The ellipsis-resize-detection html attribute\n   * Algorithm to use to detect element/window resize - any of the following:\n   * 'resize-observer': (default) Use native ResizeObserver - see\n   *    https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\n   *    and https://github.com/juggle/resize-observer\n   * 'window': Only check if the whole window has been resized/changed orientation by using angular's built-in HostListener\n   */\n  @Input('ellipsis-resize-detection') resizeDetectionStrategy:\n    '' | 'manual' | 'resize-observer' | 'window';\n\n  /**\n   * The ellipsis-click-more html attribute\n   * If anything is passed, the ellipsisCharacters will be\n   * wrapped in <a></a> tags and an event handler for the\n   * passed function will be added to the link\n   */\n  @Output('ellipsis-click-more') moreClickEmitter: EventEmitter<MouseEvent> = new EventEmitter();\n\n\n  /**\n   * The ellipsis-change html attribute\n   * This emits after which index the text has been truncated.\n   * If it hasn't been truncated, null is emitted.\n   */\n  @Output('ellipsis-change') changeEmitter: EventEmitter<number> = new EventEmitter();\n\n  /**\n   * Utility method to quickly find the largest number for\n   * which `callback(number)` still returns true.\n   * @param  max      Highest possible number\n   * @param  callback Should return true as long as the passed number is valid\n   * @return          Largest possible number\n   */\n  private static numericBinarySearch(max: number, callback: (n: number) => boolean): number {\n    let low = 0;\n    let high = max;\n    let best = -1;\n    let mid: number;\n\n    while (low <= high) {\n      // tslint:disable-next-line:no-bitwise\n      mid = ~~((low + high) / 2);\n      const result = callback(mid);\n      if (!result) {\n        high = mid - 1;\n      } else {\n        best = mid;\n        low = mid + 1;\n      }\n    }\n\n    return best;\n  }\n\n  /**\n   * Convert ellipsis input to string\n   * @param input string or number to be displayed as an ellipsis\n   * @return      input converted to string\n   */\n  private static convertEllipsisInputToString(input: string | number): string {\n    if (typeof input === 'undefined' || input === null) {\n      return '';\n    }\n\n    return String(input);\n  }\n\n  /**\n   * The directive's constructor\n   */\n  public constructor(\n    private elementRef: ElementRef<HTMLElement>,\n    private renderer: Renderer2,\n    private ngZone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) { }\n\n  /**\n   * Angular's init view life cycle hook.\n   * Initializes the element for displaying the ellipsis.\n   */\n  ngAfterViewInit() {\n    if (!isPlatformBrowser(this.platformId)) {\n      // in angular universal we don't have access to the ugly\n      // DOM manipulation properties we sadly need to access here,\n      // so wait until we're in the browser:\n      return;\n    }\n\n    // Prefer native ResizeObserver over ponyfill, if available:\n    if ((<any> window).ResizeObserver != null) {\n      ResizeObserver = (<any> window).ResizeObserver;\n    }\n\n    // let the ellipsis characters default to '...':\n    if (this.ellipsisCharacters === '') {\n      this.ellipsisCharacters = '...';\n    }\n\n    // create more anchor element:\n    this.moreAnchor = <HTMLAnchorElement> this.renderer.createElement('a');\n    this.moreAnchor.className = 'ngx-ellipsis-more';\n    this.moreAnchor.href = '#';\n    this.moreAnchor.textContent = this.ellipsisCharacters;\n\n    // perform regex replace on word boundaries:\n    if (!this.ellipsisWordBoundaries) {\n      this.ellipsisWordBoundaries = '';\n    }\n    this.ellipsisWordBoundaries = '[' + this.ellipsisWordBoundaries.replace(/\\\\n/, '\\n').replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') + ']';\n\n    if (!this.ellipsisSubstrFn) {\n      this.ellipsisSubstrFn = (str: string, from: number, length?: number) => {\n        return str.substr(from, length);\n      }\n    }\n\n    // store the original contents of the element:\n    this.elem = this.elementRef.nativeElement;\n    if (typeof this.ellipsisContent !== 'undefined' && this.ellipsisContent !== null) {\n      this.originalText = EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent);\n    } else if (!this.originalText) {\n      this.originalText = this.elem.textContent.trim();\n    }\n\n    // add a wrapper div (required for resize events to work properly):\n    this.renderer.setProperty(this.elem, 'innerHTML', '');\n    this.innerElem = this.renderer.createElement('div');\n    this.renderer.addClass(this.innerElem, 'ngx-ellipsis-inner');\n    const text = this.renderer.createText(this.originalText);\n    this.renderer.appendChild(this.innerElem, text);\n    this.renderer.appendChild(this.elem, this.innerElem);\n\n    this.previousDimensions = {\n      width: this.elem.clientWidth,\n      height: this.elem.clientHeight\n    };\n\n    // start listening for resize events:\n    this.addResizeListener(true);\n  }\n\n  /**\n   * Angular's change life cycle hook.\n   * Change original text (if the ellipsis-content has been passed)\n   * and re-render\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    const moreAnchorRequiresChange = this.moreAnchor && changes['ellipsisCharacters'];\n    if (moreAnchorRequiresChange) {\n      this.moreAnchor.textContent = this.ellipsisCharacters;\n    }\n\n    if (this.elem\n        && typeof this.ellipsisContent !== 'undefined'\n        && (\n          this.originalText !== EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent)\n          || moreAnchorRequiresChange\n        )\n    ) {\n      this.originalText = EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent);\n      this.applyEllipsis();\n    }\n  }\n\n  /**\n   * Angular's destroy life cycle hook.\n   * Remove event listeners\n   */\n  ngOnDestroy() {\n    // In angular universal we don't have any listeners hooked up (all requiring ugly DOM manipulation methods),\n    // so we only need to remove them, if we're inside the browser:\n    if (isPlatformBrowser(this.platformId)) {\n      this.removeAllListeners();\n    }\n  }\n\n  /**\n   * remove all resize listeners\n   */\n  private removeAllListeners() {\n    if (this.destroyMoreClickListener) {\n      this.destroyMoreClickListener();\n    }\n\n    this.removeResizeListeners$.next();\n    this.removeResizeListeners$.complete();\n  }\n\n\n  /**\n   * Set up an event listener to call applyEllipsis() whenever a resize has been registered.\n   * The type of the listener (window/element) depends on the resizeDetectionStrategy.\n   * @param triggerNow=false if true, the ellipsis is applied immediately\n   */\n  private addResizeListener(triggerNow = false) {\n    if (typeof (this.resizeDetectionStrategy) === 'undefined') {\n      this.resizeDetectionStrategy = '';\n    }\n\n    switch (this.resizeDetectionStrategy) {\n      case 'manual':\n        // Users will trigger applyEllipsis via the public API\n        break;\n      case 'window':\n        this.addWindowResizeListener();\n        break;\n      default:\n        if (typeof (console) !== 'undefined') {\n          console.warn(\n            `No such ellipsis-resize-detection strategy: '${this.resizeDetectionStrategy}'. Using 'resize-observer' instead`\n          );\n        }\n      // eslint-disable-next-line no-fallthrough\n      case 'resize-observer':\n      case '':\n        this.addElementResizeListener();\n        break;\n    }\n\n    if (triggerNow && this.resizeDetectionStrategy !== 'manual') {\n      this.applyEllipsis();\n    }\n  }\n\n  /**\n   * Set up an event listener to call applyEllipsis() whenever the window gets resized.\n   */\n  private addWindowResizeListener() {\n    const removeWindowResizeListener = this.renderer.listen('window', 'resize', () => {\n      this.ngZone.run(() => {\n        this.applyEllipsis();\n      });\n    });\n\n    this.removeResizeListeners$.pipe(take(1)).subscribe(() => removeWindowResizeListener());\n  }\n\n  /**\n   * Set up an event listener to call applyEllipsis() whenever the element\n   * has been resized.\n   */\n  private addElementResizeListener() {\n    const resizeObserver = new ResizeObserver(() => {\n      window.requestAnimationFrame(() => {\n        if (this.previousDimensions.width !== this.elem.clientWidth || this.previousDimensions.height !== this.elem.clientHeight) {\n          this.ngZone.run(() => {\n            this.applyEllipsis();\n          });\n\n          this.previousDimensions.width = this.elem.clientWidth;\n          this.previousDimensions.height = this.elem.clientHeight;\n        }\n      });\n    });\n    resizeObserver.observe(this.elem);\n    this.removeResizeListeners$.pipe(take(1)).subscribe(() => resizeObserver.disconnect());\n  }\n\n  /**\n   * Get the original text's truncated version. If the text really needed to\n   * be truncated, this.ellipsisCharacters will be appended.\n   * @param max the maximum length the text may have\n   * @return string       the truncated string\n   */\n  private getTruncatedText(max: number): string {\n    if (!this.originalText || this.originalText.length <= max) {\n      return this.originalText;\n    }\n\n    const truncatedText = this.ellipsisSubstrFn(this.originalText, 0, max);\n    if (this.ellipsisWordBoundaries === '[]' || this.originalText.charAt(max).match(this.ellipsisWordBoundaries)) {\n      return truncatedText;\n    }\n\n    let i = max - 1;\n    while (i > 0 && !truncatedText.charAt(i).match(this.ellipsisWordBoundaries)) {\n      i--;\n    }\n    return this.ellipsisSubstrFn(truncatedText, 0, i);\n  }\n\n  /**\n   * Set the truncated text to be displayed in the inner div\n   * @param max the maximum length the text may have\n   * @param addMoreListener=false listen for click on the ellipsisCharacters anchor tag if the text has been truncated\n   * @returns length of remaining text (excluding the ellipsisCharacters, if they were added)\n   */\n  private truncateText(max: number, addMoreListener = false): number {\n    let text = this.getTruncatedText(max);\n    const truncatedLength = text.length;\n    const textTruncated = (truncatedLength !== this.originalText.length);\n\n    if (textTruncated && !this.showMoreLink) {\n      text += this.ellipsisCharacters;\n    }\n\n    this.renderer.setProperty(this.innerElem, 'textContent', text);\n\n    if (textTruncated && this.showMoreLink) {\n      this.renderer.appendChild(this.innerElem, this.moreAnchor);\n    }\n\n    // Remove any existing more click listener:\n    if (this.destroyMoreClickListener) {\n      this.destroyMoreClickListener();\n      this.destroyMoreClickListener = null;\n    }\n\n    // If the text has been truncated, add a more click listener:\n    if (addMoreListener && textTruncated) {\n      this.destroyMoreClickListener = this.renderer.listen(this.moreAnchor, 'click', (e: MouseEvent) => {\n        if (!e.target || !(<HTMLElement> e.target).classList.contains('ngx-ellipsis-more')) {\n          return;\n        }\n        e.preventDefault();\n        this.moreClickEmitter.emit(e);\n      });\n    }\n\n    return truncatedLength;\n  }\n\n  /**\n   * Display ellipsis in the inner div if the text would exceed the boundaries\n   */\n  public applyEllipsis() {\n    // Remove the resize listener as changing the contained text would trigger events:\n    this.removeResizeListeners$.next();\n\n    // Find the best length by trial and error:\n    const maxLength = EllipsisDirective.numericBinarySearch(this.originalText.length, curLength => {\n      this.truncateText(curLength);\n      return !this.isOverflowing;\n    });\n\n    // Apply the best length:\n    const finalLength = this.truncateText(maxLength, this.showMoreLink);\n\n    // Re-attach the resize listener:\n    this.addResizeListener();\n\n    // Emit change event:\n    if (this.changeEmitter.observers.length > 0) {\n      this.changeEmitter.emit(\n        (this.originalText.length === finalLength) ? null : finalLength\n      );\n    }\n  }\n\n\n  /**\n   * Whether the text is exceeding the element's boundaries or not\n   */\n  private get isOverflowing(): boolean {\n    // Enforce hidden overflow (required to compare client width/height with scroll width/height)\n    const currentOverflow = this.elem.style.overflow;\n    if (!currentOverflow || currentOverflow === 'visible') {\n      this.elem.style.overflow = 'hidden';\n    }\n\n    const isOverflowing = this.elem.clientWidth < this.elem.scrollWidth - 1 || this.elem.clientHeight < this.elem.scrollHeight - 1;\n\n    // Reset overflow to the original configuration:\n    this.elem.style.overflow = currentOverflow;\n\n    return isOverflowing;\n  }\n\n  /**\n   * Whether the `ellipsisCharacters` are to be wrapped inside an anchor tag (if they are shown at all)\n   */\n  private get showMoreLink(): boolean {\n    return (this.moreClickEmitter.observers.length > 0);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { EllipsisDirective } from './directives/ellipsis.directive';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [EllipsisDirective],\n  exports: [EllipsisDirective]\n})\nexport class EllipsisModule { }\n","/*\n * Public API Surface of ngx-ellipsis\n */\n\nexport * from './lib/directives/ellipsis.directive';\nexport * from './lib/ellipsis.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}